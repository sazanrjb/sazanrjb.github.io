<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sajan Rajbhandari</title>
    <description>A simple guy who loves technology.</description>
    <link>https://sazanrjb.com.np/</link>
    <atom:link href="https://sazanrjb.com.np/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 04 Aug 2019 21:08:06 +0545</pubDate>
    <lastBuildDate>Sun, 04 Aug 2019 21:08:06 +0545</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>Writing clean and optimized code</title>
        <description>&lt;p&gt;A code, whether it is a good or a bad one, depends ultimately on a developer. A bad code may work functionally, but the software will bring uncertain bugs and will be difficult to scale in the future. Writing a clean and optimized code takes time, and practice. But once written, it will not just reduce bugs and uncertainty, but also help other developers to understand the code properly.&lt;/p&gt;

&lt;p&gt;There are many ways one can write clean and optimized code. Few of them are as follows:&lt;/p&gt;

&lt;h3 id=&quot;write-intuitive-class-method-and-variable-names&quot;&gt;Write intuitive class, method and variable names&lt;/h3&gt;
&lt;p&gt;Naming things are hard. A developer must take out his/her time to choose proper names instead of writing unrelated ones. Improper names will not just waste the time of other developers, but also the one who writes, in the future.&lt;/p&gt;

&lt;p&gt;Consider the following simple example:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Super'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Man'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here, a developer can understand the code only after reading the whole logic. Now, lets consider the following code:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Super'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Man'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getFullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;getFullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Anyone can understand the code just by reading the variable and method names.&lt;/p&gt;

&lt;h3 id=&quot;follow-coding-standards&quot;&gt;Follow coding standards&lt;/h3&gt;
&lt;p&gt;Coding standards are the set of guidelines and best practices for writing a software. In every programming languages, there are certain rules or conventions that the developers follow to make the code consistent and clean. These standards help the developers in any part of the world write the same code and work together without any problems.&lt;/p&gt;

&lt;h3 id=&quot;yagni-principle&quot;&gt;YAGNI Principle&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;YAGNI&lt;/strong&gt; which stands for &lt;strong&gt;You Arenâ€™t Gonna Need It&lt;/strong&gt;,  states that a developer should not add the functionality unless it is truely necessary.  Assuming the future requirements unnecessary and adding unrequired functionality with add code complexity, and can make the code unoptimized.&lt;/p&gt;

&lt;p&gt;Lets say there is a requirement to activate a client. One might think of future and write a function to handle the activation feature of multiple clients.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;changeStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ids&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clientService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;activate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is ok if there will definately be the requirement in the future. But for now, it only adds complexity in the code. Instead of sending an id of the client, the id needs to be wrapped around an array to use this function. So, do not over engineer the solution of the problem that might occur in the future.&lt;/p&gt;

&lt;h3 id=&quot;review-your-own-code&quot;&gt;Review your own code&lt;/h3&gt;
&lt;p&gt;To ensure that the code you wrote is clean and optimized enough, review your own code regularly, or atleast before merging the code. Reading code allow` developers to find any possible fixes and changes that may not have found while writing. While reviewing the code, a developer can also find a possible way that he/she can simplify the particular code.&lt;/p&gt;

&lt;p&gt;In conclusion, writing a clean code is all about simplifying the code, and making it consistent through out the program. Coding standards help to make the code consistent, and a developer should always take his/her time out to read about the best practices and how others are solving the particular problem.&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Aug 2019 02:47:00 +0545</pubDate>
        <link>https://sazanrjb.com.np/2019/writing-clean-and-optimized-code/</link>
        <guid isPermaLink="true">https://sazanrjb.com.np/2019/writing-clean-and-optimized-code/</guid>
        
        <category>programming</category>
        
        
        <category>Tutorial</category>
        
      </item>
    
      <item>
        <title>A basic guide to start your illustration journey</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;This post was originally posted on Medium (
&lt;a href=&quot;https://medium.com/@sazanrjb/a-basic-guide-to-start-your-illustration-journey-329189fc5478&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;A basic guide to start your illustration journey&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It has been quite a while since I started creating illustrations, and digital drawings. It was back in 2012 when I tried one, though I was just in the learning phase.&lt;/p&gt;

&lt;p&gt;It has been one of my hobbies, along with photo manipulations in photoshop. I mostly enjoy creating animes or digital drawing of people.&lt;/p&gt;

&lt;p&gt;This is one of my first illustrations:&lt;/p&gt;

&lt;figure style=&quot;text-align: center;&quot; class=&quot;image&quot;&gt;
&lt;img src=&quot;/images/illustration-guide/kumari.jpeg&quot; alt=&quot;Kumari Illustration&quot; /&gt;
 &lt;figcaption&gt;Source: http://sazanrjb.blogspot.com/2012/11/living-goddess-kumari.html&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Every time I post a new illustration, many of my friends request me to teach them how to make one or even make one for them. So I wanted to share basics about how you can start creating some fancy digital drawings yourself.&lt;/p&gt;

&lt;p&gt;Before giving some ideas, I assume that you at least know the basics of using some tools like Adobe Illustrator or Photoshop, that you will work on. I particularly use Illustrator as it allows making vector images.&lt;/p&gt;

&lt;p&gt;So, here are few things that might help you to start your illustration journey:&lt;/p&gt;

&lt;h3 id=&quot;watch-tutorials&quot;&gt;Watch tutorials&lt;/h3&gt;
&lt;p&gt;Having an interest in making digital drawing is one thing, but you will need to learn how to use different tools and features. I recommend using Adobe Illustrator as it is quite simple and easy to learn. Watch videos on youtube or get enrolled in a course if you are so much interested.&lt;/p&gt;

&lt;h3 id=&quot;practice-by-making-shapes&quot;&gt;Practice by making shapes&lt;/h3&gt;
&lt;p&gt;Before you start working on a real project, practice by making different shapes on the software. Making digital art is all about using different shapes. Use the options available in the tools palette such as a rectangle, rounded, etc. and combine them into shapes.&lt;/p&gt;

&lt;div style=&quot;text-align: center;margin-bottom: 1em;&quot;&gt;
    &lt;img src=&quot;/images/illustration-guide/practice-shapes.png&quot; alt=&quot;Practice Shapes&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The most important tool is the pen tool because you will need to use it most of the times. Make yourself comfortable with it by making different shapes, like a flower, house, tree, etc.&lt;/p&gt;

&lt;h3 id=&quot;take-reference-from-internet&quot;&gt;Take Reference from Internet&lt;/h3&gt;
&lt;p&gt;Never hesitate to take help online. It is likely that what you are trying to create is already uploaded by someone else. Search with proper keywords on google as well as designers specific sites like Dribbble, Behance, etc. Take ideas from there and try to revamp the concept using your own creativity.&lt;/p&gt;

&lt;h3 id=&quot;draw-on-a-paper&quot;&gt;Draw on a paper&lt;/h3&gt;
&lt;p&gt;If you want to create something new or pour your imagination into the artboard, it is necessary that you draw it on the paper first. It gives you an idea about your final product and helps you to outline the picture you are thinking of. But donâ€™t worry, the drawings do not need to be perfect, although it should reflect what you want to create.&lt;/p&gt;

&lt;div style=&quot;text-align: center;margin-bottom: 1em;&quot;&gt;
    &lt;img src=&quot;/images/illustration-guide/draw-on-paper.jpeg&quot; alt=&quot;Draw on paper&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;start-working&quot;&gt;Start working&lt;/h3&gt;
&lt;p&gt;Once you have determined what to make, and have a prototype ready, open it in the software and start your work. Even if you want to create without any reference, just give it a try, no problem. This is the time when your practice of making shapes will come handy.&lt;/p&gt;

&lt;div style=&quot;text-align: center;margin-bottom: 1em;&quot;&gt;
    &lt;img src=&quot;/images/illustration-guide/start-working.jpeg&quot; alt=&quot;Start working&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Choose appropriate fill and stroke colors in the tools palette and make outlines outside of your reference. Illustrator will automatically fill the color once the path is completed. After making different shapes, you will need to arrange the layers to move them below or above. In Illustrator, right-click the layer you want to move, click Arrange, then choose the option you want.&lt;/p&gt;

&lt;figure style=&quot;text-align: center;margin-bottom: 1em;&quot; class=&quot;image&quot;&gt;
&lt;img src=&quot;/images/illustration-guide/arrange-layers.jpeg&quot; alt=&quot;Arrange layers&quot; /&gt;
 &lt;figcaption&gt;Process to arrange layers&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;After you create few elements, you will get an idea and will be a lot easier to continue.&lt;/p&gt;

&lt;div style=&quot;text-align: center;margin-bottom: 1em;&quot;&gt;
    &lt;img src=&quot;/images/illustration-guide/santa.jpeg&quot; alt=&quot;Santa Illustration&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; Learn keyboard shortcuts to perform different actions. It will make your work much faster. To see shortcuts from the official Adobe Illustrator website, Click Here.&lt;/p&gt;

&lt;h3 id=&quot;choose-colors-wisely&quot;&gt;Choose colors wisely&lt;/h3&gt;
&lt;p&gt;Choosing a suitable color is one of the problems of a lot of people. Even I get confused many times about which colors might suit the design. Coolers is a website where you can choose colors from a huge number of shades of different colors.&lt;/p&gt;

&lt;figure style=&quot;text-align: center;&quot; class=&quot;image&quot;&gt;
&lt;img src=&quot;/images/illustration-guide/searching-our-identity.jpeg&quot; alt=&quot;Searching Identity Illustration&quot; /&gt;
 &lt;figcaption&gt;Source: http://sazanrjb.blogspot.com/2013/02/searching-our-identity.html&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I have seen people heavily using gradients to make things beautiful. But I recommend you to use gradients only if it is extremely necessary. Gradients do look beautiful if good color choices are made.&lt;/p&gt;

&lt;h3 id=&quot;give-an-extra-effort-on-details&quot;&gt;Give an extra effort on details&lt;/h3&gt;
&lt;p&gt;The more you work on details, the more beautiful your art will become. Details like using shadows, lightings, designs in clothes, etc. will make your work look cooler. People also use textures in and around pictures to make them look more appealing.&lt;/p&gt;

&lt;figure style=&quot;text-align: center;&quot; class=&quot;image&quot;&gt;
&lt;img src=&quot;/images/illustration-guide/jharana-gurung.jpeg&quot; alt=&quot;Jharana Gurung Illustration&quot; /&gt;
 &lt;figcaption&gt;Source: https://www.behance.net/gallery/31512589/Anime-Jharana-Gurung&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;share-your-work-online&quot;&gt;Share your work online&lt;/h3&gt;
&lt;p&gt;After you finish your work, donâ€™t keep it to yourself. Spread your work. You will get feedback and suggestions from a lot of different people. Those feedback will help you to improve your skills and create new masterpieces.Â ;)&lt;/p&gt;

&lt;p&gt;I hope this article will help you to start your journey with illustrations. If you really want to start, donâ€™t wait for tomorrow, start practicing from today. And donâ€™t forget to send me links to your works, I would love to see them.&lt;/p&gt;

&lt;p&gt;Here are the links to my profiles:
Behance | Dribbble | Twitter&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Aug 2019 01:00:00 +0545</pubDate>
        <link>https://sazanrjb.com.np/2019/a-basic-guide-to-start-your-illustration-journey/</link>
        <guid isPermaLink="true">https://sazanrjb.com.np/2019/a-basic-guide-to-start-your-illustration-journey/</guid>
        
        <category>illustration</category>
        
        <category>graphic design</category>
        
        <category>tutorial</category>
        
        
        <category>Tutorial</category>
        
      </item>
    
      <item>
        <title>Register .np domain for free</title>
        <description>&lt;p&gt;So you are planning to create a website and want to get a domain name for free? Or you are planning to start your blog but dont know where to start from. Be it a personal website, or a business website, you can get .np domains for free in Nepal. The only thing required is scanned copy of your citizenship, and a cover letter.&lt;/p&gt;

&lt;h3 id=&quot;what-is-np-domain-name&quot;&gt;What is .np domain name?&lt;/h3&gt;

&lt;p&gt;.np domain name is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Country_code_top-level_domain&quot;&gt;Country code top-level domain (ccTLD)&lt;/a&gt;, reserved for Nepal. &lt;a href=&quot;http://www.mos.com.np/&quot;&gt;Mercantile Communicationa PVT. LTD.&lt;/a&gt; has the right to distribute .np domains in Nepal.&lt;/p&gt;

&lt;h3 id=&quot;how-to-get-then&quot;&gt;How to get then?&lt;/h3&gt;

&lt;p&gt;The registration is quite straight forward.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Go to https://register.com.np/ and check if the domain name you want is available. You can select from a various sets of domains such as &lt;code class=&quot;highlighter-rouge&quot;&gt;.com.np&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.info.np&lt;/code&gt;, etc.&lt;/p&gt;

    &lt;p&gt;If the domain is not available, try a new one.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If the domain is available, click &lt;code class=&quot;highlighter-rouge&quot;&gt;Register now&lt;/code&gt;. It will take it to the login page. If you have not registered before, click &lt;code class=&quot;highlighter-rouge&quot;&gt;Create user&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fill all the details, and click &lt;code class=&quot;highlighter-rouge&quot;&gt;Create account&lt;/code&gt;. Verfication link will be sent to your email. Go to your email, and click &lt;code class=&quot;highlighter-rouge&quot;&gt;Verify&lt;/code&gt;. It will take you to the login page. Login with your newly created credentials.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next you need to fill the domain request form. The tricky part is &lt;code class=&quot;highlighter-rouge&quot;&gt;Name server&lt;/code&gt; section. If you have purchased a hosting package, you will get nameservers from your hosting provider. If not, you can use free nameservers till you get a new one: &lt;code class=&quot;highlighter-rouge&quot;&gt;ns1.afraid.org&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ns2.afraid.org&lt;/code&gt;&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;You can also use Cloudflareâ€™s nameservers as well, which has many benefits. For that, login to &lt;a href=&quot;https://cloudflare.com&quot;&gt;Cloudflare&lt;/a&gt;, go to &lt;code class=&quot;highlighter-rouge&quot;&gt;DNS&lt;/code&gt;, and under &lt;code class=&quot;highlighter-rouge&quot;&gt;Cloudflare Nameservers&lt;/code&gt; section there will be the nameservers. Copy those in the two nameservers section.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;Then fill the &lt;code class=&quot;highlighter-rouge&quot;&gt;Administrative contact&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Technical contact&lt;/code&gt; information, which is quite straight forward.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Submit documents&lt;/p&gt;

    &lt;p&gt;Make sure you have scanned copy of either your citizenship, passport or license. 
 An extra thing you require is a cover letter requesting the domain name.&lt;/p&gt;

    &lt;p&gt;here is a sample of the cover letter:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
     Date: 2019-02-21

     To,
     The Host Master,
     Mercantile Communications Pvt. Ltd.

     Subject: Regarding registration of .np domain name

     Dear Sir/Madam,

     I would like to register a .np domain, www.&amp;lt;YOUR_DOMAIN&amp;gt;.com.np for my personal website. 
     I have filled all the forms, and also attached the required documents.

     I will be looking forward to hear soon. 

     Regards,
     &amp;lt;YOUR NAME&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Make a doc file, paste the content above, and make adjustments accordingly. Then upload the file.&lt;/p&gt;

    &lt;p&gt;After that click &lt;code class=&quot;highlighter-rouge&quot;&gt;Save and Continue&lt;/code&gt;. Thats it! It will take around a day to point the nameservers to your domain name.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Thu, 21 Feb 2019 16:45:00 +0545</pubDate>
        <link>https://sazanrjb.com.np/2019/register-dot-np-domain-for-free/</link>
        <guid isPermaLink="true">https://sazanrjb.com.np/2019/register-dot-np-domain-for-free/</guid>
        
        <category>domain registration</category>
        
        <category>websites</category>
        
        
        <category>Domain Registration</category>
        
      </item>
    
      <item>
        <title>Nepali PUBG Characters</title>
        <description>&lt;p&gt;&lt;strong&gt;PlayerUnknown Battlegrounds (PUBG)&lt;/strong&gt; was one of the most popular games of 2018. Though I have not played it, I really like the character design of the game.&lt;/p&gt;

&lt;p&gt;I wanted to make similar character in Nepali dress up, and started thinking about the ideas. The obvious choice was to make a character wearing &lt;em&gt;Daura Suruwal&lt;/em&gt;. As I started creating it, several other ideas came into my mind.&lt;/p&gt;

&lt;p&gt;Here are some of the concept designs of PUBG character in Nepali lifestyle.&lt;/p&gt;

&lt;h3 id=&quot;pubg-character-in-nepali-dress&quot;&gt;PUBG Character in Nepali dress&lt;/h3&gt;
&lt;p&gt;Well battling in Daura Suruwal may not be easy though!
&lt;img src=&quot;/images/nepali-pubg-characters/nepali-pubg.jpg&quot; alt=&quot;Nepali PUBG Character&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;subg&quot;&gt;SUBG&lt;/h3&gt;
&lt;p&gt;Everyone needs to buy veggies.
&lt;img src=&quot;/images/nepali-pubg-characters/subg.jpg&quot; alt=&quot;Nepali PUBG Character&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;saug&quot;&gt;SAUG&lt;/h3&gt;
&lt;p&gt;Oh well!
&lt;img src=&quot;/images/nepali-pubg-characters/saug.jpg&quot; alt=&quot;Nepali PUBG Character&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;pubg-character-visiting-kathmandu&quot;&gt;PUBG Character visiting Kathmandu&lt;/h3&gt;
&lt;p&gt;What happens if PUBG Character comes to Kathmandu?
&lt;img src=&quot;/images/nepali-pubg-characters/ktm-pubg.jpg&quot; alt=&quot;Nepali PUBG Character&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.behance.net/gallery/74485577/Nepali-PUBG-Character&quot;&gt;Behance&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dribbble.com/shots/5794015-Nepali-PUBG-Character&quot;&gt;Dribbble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you liked it, share it with your friends. :)&lt;/p&gt;
</description>
        <pubDate>Sun, 06 Jan 2019 16:45:00 +0545</pubDate>
        <link>https://sazanrjb.com.np/2019/nepali-pubg-characters/</link>
        <guid isPermaLink="true">https://sazanrjb.com.np/2019/nepali-pubg-characters/</guid>
        
        <category>illustration</category>
        
        <category>character design</category>
        
        <category>graphic design</category>
        
        
        <category>Illustration</category>
        
      </item>
    
      <item>
        <title>Leverage laravel's form request to make your code cleaner</title>
        <description>&lt;p&gt;Laravel has a powerful feature called &lt;strong&gt;Form Request&lt;/strong&gt; to perform form validation logic. If we look at laravelâ€™s official documentation, we can find &lt;strong&gt;Form Request&lt;/strong&gt; under &lt;a href=&quot;https://laravel.com/docs/5.6/validation#form-request-validation&quot;&gt;&lt;strong&gt;Validation&lt;/strong&gt;&lt;/a&gt; section. But it can be used for much more purposes than just a validation.&lt;/p&gt;

&lt;p&gt;First of all, letâ€™s see how we can make a request class. Laravel has the following artisan command to create a form request class:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php artisan make:request CreateProductRequest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The above command will generate a file inside &lt;code class=&quot;highlighter-rouge&quot;&gt;app/Http/Requests&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;The file will contain two methods, &lt;code class=&quot;highlighter-rouge&quot;&gt;authorize&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;rules&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;authorize&lt;/code&gt; method is used to check if the user has authority to make this request. While in &lt;code class=&quot;highlighter-rouge&quot;&gt;rules&lt;/code&gt; method, we specify different rules that needs to be passed before moving to the controller.&lt;/p&gt;

&lt;p&gt;To apply this validation rules, we just need to inject this request class in our controller method like below:&lt;/p&gt;
&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CreateProductRequest&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can view more about it on laravelâ€™s &lt;a href=&quot;https://laravel.com/docs/5.6/validation#introduction&quot;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Besides validation, request classes can be used to optimize and make controller classes look cleaner.&lt;/p&gt;

&lt;h3 id=&quot;custom-rule-class&quot;&gt;Custom Rule class&lt;/h3&gt;
&lt;p&gt;In many cases, &lt;a href=&quot;https://laravel.com/docs/5.5/validation#available-validation-rules&quot;&gt;built-in validation rules&lt;/a&gt; will be fine. But there will be many cases when custom rules need to be made.&lt;/p&gt;

&lt;p&gt;Lets say, we have two tables, &lt;code class=&quot;highlighter-rouge&quot;&gt;categories&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;products&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;products&lt;/code&gt; table contains a foreign key &lt;code class=&quot;highlighter-rouge&quot;&gt;category_id&lt;/code&gt; which links to 	&lt;code class=&quot;highlighter-rouge&quot;&gt;categories&lt;/code&gt;. A category can have multiple products and product name should be unique in each category.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;categories&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;id&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;products&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;id&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;category_id&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;While adding and editing products, we need to check if the product with the given name is already used. This logic can be written in controller but it will make the method look dirty. Instead, we can create a custom &lt;strong&gt;Rule&lt;/strong&gt; class introduced from laravel 5.5.&lt;/p&gt;

&lt;p&gt;A custom validation rule class can be creating by implementing `
Illuminate\Contracts\Validation\Rule` interface or with the following artisan command:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php artisan make:rule UniqueProduct
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It will create a file inside &lt;code class=&quot;highlighter-rouge&quot;&gt;app\Rules&lt;/code&gt; directory. The Rule interface has two methods, &lt;code class=&quot;highlighter-rouge&quot;&gt;passes&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;passes&lt;/code&gt; is where we put logic required for the validation. In &lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt;, we can simply return a string if the validation fails.&lt;/p&gt;
&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App\Rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Illuminate\Contracts\Validation\Rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Illuminate\Support\Facades\DB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UniqueProduct&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Rule&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ignore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$categoryId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$categoryId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;categoryId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$categoryId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ignore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ignore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;passes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'products'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$query&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'products.category_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;categoryId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// While editing product, ignore current product
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ignore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nv&quot;&gt;$product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ignore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ignore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// if &amp;gt; 0, Product with the name already exists
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'The :attribute has already been taken.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;First of all, the id of the category is passed through the constructor. In the &lt;code class=&quot;highlighter-rouge&quot;&gt;passes&lt;/code&gt; method, at first,  there is a query to check if a product with the same name exists in the table, no fancy here. After that there is a condition to ignore the current productâ€™s row. While editing, we donâ€™t have to check the current productâ€™s data, so for that, we just need to pass the identifier of the product in an array to the ignore method, eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;['id', 1]&lt;/code&gt;.  And in &lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt; method, we just return the error message for the validation.&lt;/p&gt;

&lt;p&gt;To use this rule, in the form request class, we only need to instantiate the rule class.&lt;/p&gt;
&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;CreateProductRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;php&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
		&lt;span class=&quot;s1&quot;&gt;'category_id'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'required'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
			&lt;span class=&quot;s1&quot;&gt;'bail'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;s1&quot;&gt;'required'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UniqueProduct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'category_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;UpdateProductRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;php&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
		&lt;span class=&quot;s1&quot;&gt;'category_id'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'required'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
			&lt;span class=&quot;s1&quot;&gt;'bail'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;s1&quot;&gt;'required'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UniqueProduct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'category_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ignore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'productId'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// productId is obtained from the route param
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Route::put('products/{productId}', '..ProductController@update');
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So now both your controller and request class will look cleaner.&lt;/p&gt;

&lt;h3 id=&quot;addingediting-request-elements&quot;&gt;Adding/Editing request elements&lt;/h3&gt;
&lt;p&gt;There will be a time when we have to add some elements to the request object. Also, we may need to modify request elements before validating or storing it to the database.&lt;/p&gt;

&lt;p&gt;Lets say, while editing a product, the request has manufactured year, date and day as seperate elements, and we need to merge them together to create a single date. Similarly, letâ€™s say productâ€™s attributes are in json format and we need to convert it to array.&lt;/p&gt;

&lt;p&gt;One way is to modify them in the controller or service class after receiving the request object. Since, we are talking about making our code cleaner, we can utilize request classes to make our changes.&lt;/p&gt;

&lt;p&gt;As of laravel 5, laravel calls &lt;code class=&quot;highlighter-rouge&quot;&gt;getValidatorInstance&lt;/code&gt; method and it gets through several methods, to call &lt;code class=&quot;highlighter-rouge&quot;&gt;all()&lt;/code&gt; to get the input data for validation. We can override this method in form request class to add our own, or modify the request elements.&lt;/p&gt;

&lt;h3 id=&quot;adding-elements-to-request-data&quot;&gt;Adding elements to request data&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt; method will merge the request data with our own array data, which can be useful to add our own data to the request object.&lt;/p&gt;
&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'date_of_manufacture'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;implode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;s1&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
			&lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'year'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
			&lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'month'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
			&lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'day'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;)]);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;editing-request-data&quot;&gt;Editing request data&lt;/h3&gt;
&lt;p&gt;We can retrieve all the input data in an array from &lt;code class=&quot;highlighter-rouge&quot;&gt;parent::all()&lt;/code&gt; . Then we can modify the existing elements of the array.&lt;/p&gt;
&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// assuming attributes will be json encoded data
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// convert to into associative array
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// can be useful for array validation
&lt;/span&gt;	&lt;span class=&quot;nv&quot;&gt;$input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'attributes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;json_decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'attributes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// replaces the request data with new data
&lt;/span&gt;	&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So by these ways, we can make our code cleaner by utilizing the request classes, and use them beyond validation.&lt;/p&gt;
</description>
        <pubDate>Wed, 25 Apr 2018 01:42:00 +0545</pubDate>
        <link>https://sazanrjb.com.np/2018/leverage-laravels-form-request-optimize-and-make-code-cleaner/</link>
        <guid isPermaLink="true">https://sazanrjb.com.np/2018/leverage-laravels-form-request-optimize-and-make-code-cleaner/</guid>
        
        <category>laravel</category>
        
        <category>programming</category>
        
        
        <category>Laravel</category>
        
      </item>
    
      <item>
        <title>5 things I learned by participating in Hacktoberfest</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/5-things-learned-hacktoberfest/hacktoberfest.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This post was originally posted on Medium (
&lt;a href=&quot;https://medium.com/introcept-hub/5-things-i-learned-by-participating-in-hacktoberfest-917e2993ff5d&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;5 things I learned by participating in Hacktoberfest&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To start off, I had never contributed to any open source projects. I wanted to, but never got my hands into it, or letâ€™s say I hesitated to find suitable projects.&lt;/p&gt;

&lt;p&gt;One day, a colleague of mine told me about a campaign called Hacktoberfest, which happens during the month of October. He told me that we could get T-shirts by just opening four pull requests in any open source projects on github. At first, I did not show much interest even though I bookmarked the official page of the campaign (https://hacktoberfest.digitalocean.com).&lt;/p&gt;

&lt;p&gt;I researched about the campaign after a few days and found out that a lot of people were participating. So I decided to give it a try and started searching for issues having label â€˜hacktoberfestâ€™ on github.&lt;/p&gt;

&lt;p&gt;As I am specialized in web development, specifically in PHP and JavaScript, I searched in those areas. My first PR was about sending confirmation email to the user after creating one. Though it is a simple task, I just wanted to get my hands dirty in the campaign. After that, I had submitted four PRs, all of them got merged.&lt;/p&gt;

&lt;p&gt;I donâ€™t know about the T-shirt, but I feel happy that I participated in the campaign. Here are the 5 things I learned:&lt;/p&gt;

&lt;h3 id=&quot;experience&quot;&gt;Experience&lt;/h3&gt;

&lt;p&gt;You will feel a bit hesitant at first, but once you start, you will just want to contribute more and more. I got the chance to checkout coding styles of a lot of different developers. Furthermore, I learned about different approaches developers use to solve specific problems.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
    &lt;img src=&quot;/images/5-things-learned-hacktoberfest/challenge-completed.png&quot; alt=&quot;Challenge Completed&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;some-people-arelazy&quot;&gt;Some people areÂ lazy&lt;/h3&gt;
&lt;p&gt;While some people genuinely ask for help or encourage beginners, some people create issues for almost everything they want to add in their projects. Itâ€™s an opportunity for them to get the job done by others for free.&lt;/p&gt;

&lt;p&gt;One of the devs created an issue to test all the classes of his application. Similarly, another guy created an issue to refactor the overall project. On the other hand, many people would find and submit small PRs just to get T-shirts from github and digitalocean.&lt;/p&gt;

&lt;figure style=&quot;text-align: center;&quot; class=&quot;image&quot;&gt;
&lt;img src=&quot;/images/5-things-learned-hacktoberfest/tenor.gif&quot; alt=&quot;Duh&quot; /&gt;
 &lt;figcaption&gt;Source: https://tenor.com/view/chuck-chuck-bartowski-zachary-levi-duh-gif-4201188&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;some-areheroes&quot;&gt;Some areÂ heroes&lt;/h3&gt;
&lt;p&gt;While browsing through the list of issues, some devs were genuinely promoting open source culture and helping newcomers. Repos with thousands of likes on github, were encouraging others to submit PR by creating issues. I think this will definitely have a positive effect in expanding the open source community.&lt;/p&gt;

&lt;figure style=&quot;text-align: center;&quot; class=&quot;image&quot;&gt;
&lt;img src=&quot;/images/5-things-learned-hacktoberfest/superman.gif&quot; alt=&quot;heros&quot; /&gt;
 &lt;figcaption&gt;Source: http://www.laughinggif.com/view/e20w1ltnnk/13.html&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;freedom&quot;&gt;Freedom&lt;/h3&gt;
&lt;p&gt;Usually, we get deadlines to complete tasks when we work in the office. Working on a tight schedule not only decreases creativity but also welcomes bugs. While contributing in around five projects, I did not have any deadlines, so I could think of any new solutions to perform the task. And we donâ€™t have to worry about our PRs not getting merged.&lt;/p&gt;

&lt;h3 id=&quot;itsfun&quot;&gt;Itâ€™sÂ Fun&lt;/h3&gt;
&lt;p&gt;While my first PR took very long time to get merged, my next two PRs immediately got merged. I got excited when my PR was merged, and that encouraged me to look into other issues. Also, the appreciations I got motivated me to do more.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
    &lt;img src=&quot;/images/5-things-learned-hacktoberfest/pr-review.png&quot; alt=&quot;PR Review&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
Learning new things is fun in itself. We can try new ways to solve a problem and we are free to research about them online. Overall, this campaign was fun, getting all my PRs merged.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
    &lt;img src=&quot;/images/5-things-learned-hacktoberfest/pr-list.png&quot; alt=&quot;PRs List&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
Overall, Hacktoberfest was a perfect place for me to start contributing to open source projects. Like me, there were many people sharing positive feedback from their experiences.&lt;/p&gt;

&lt;p&gt;If you have participated in the campaign, please share your experiences in the comments below.&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Oct 2017 16:42:00 +0545</pubDate>
        <link>https://sazanrjb.com.np/2017/5-things-i-learned-by-participating-in-hacktoberfest/</link>
        <guid isPermaLink="true">https://sazanrjb.com.np/2017/5-things-i-learned-by-participating-in-hacktoberfest/</guid>
        
        <category>hacktoberfest</category>
        
        <category>programming</category>
        
        
        <category>Programming</category>
        
      </item>
    
  </channel>
</rss>
